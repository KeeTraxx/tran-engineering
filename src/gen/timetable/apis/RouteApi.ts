/* tslint:disable */
/* eslint-disable */
/**
 * timetable.search.ch
 * A REST API for public transportation timetables
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NumBoolean,
  RouteSearchResponses,
} from '../models';
import {
    NumBooleanFromJSON,
    NumBooleanToJSON,
    RouteSearchResponsesFromJSON,
    RouteSearchResponsesToJSON,
} from '../models';

export interface RouteGetRequest {
    from: string;
    to: string;
    via?: Array<string>;
    date?: string;
    time?: string;
    timeType?: RouteGetTimeTypeEnum;
    num?: number;
    pre?: number;
    showDelays?: NumBoolean;
    showTrackchanges?: NumBoolean;
    showCoordinates?: NumBoolean;
    interestDuration?: number;
    transportationTypes?: RouteGetTransportationTypesEnum;
    summary?: NumBoolean;
}

/**
 * 
 */
export class RouteApi extends runtime.BaseAPI {

    /**
     * Route searches
     */
    async routeGetRaw(requestParameters: RouteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteSearchResponses>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling routeGet.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling routeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.via) {
            queryParameters['via'] = requestParameters.via;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.timeType !== undefined) {
            queryParameters['time_type'] = requestParameters.timeType;
        }

        if (requestParameters.num !== undefined) {
            queryParameters['num'] = requestParameters.num;
        }

        if (requestParameters.pre !== undefined) {
            queryParameters['pre'] = requestParameters.pre;
        }

        if (requestParameters.showDelays !== undefined) {
            queryParameters['show_delays'] = requestParameters.showDelays;
        }

        if (requestParameters.showTrackchanges !== undefined) {
            queryParameters['show_trackchanges'] = requestParameters.showTrackchanges;
        }

        if (requestParameters.showCoordinates !== undefined) {
            queryParameters['show_coordinates'] = requestParameters.showCoordinates;
        }

        if (requestParameters.interestDuration !== undefined) {
            queryParameters['interest_duration'] = requestParameters.interestDuration;
        }

        if (requestParameters.transportationTypes !== undefined) {
            queryParameters['transportation_types'] = requestParameters.transportationTypes;
        }

        if (requestParameters.summary !== undefined) {
            queryParameters['summary'] = requestParameters.summary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/route`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteSearchResponsesFromJSON(jsonValue));
    }

    /**
     * Route searches
     */
    async routeGet(requestParameters: RouteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteSearchResponses> {
        const response = await this.routeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RouteGetTimeTypeEnum = {
    Arrival: 'arrival',
    Depart: 'depart'
} as const;
export type RouteGetTimeTypeEnum = typeof RouteGetTimeTypeEnum[keyof typeof RouteGetTimeTypeEnum];
/**
 * @export
 */
export const RouteGetTransportationTypesEnum = {
    Train: 'train',
    Tram: 'tram',
    Bus: 'bus',
    Ship: 'ship',
    Cableway: 'cableway'
} as const;
export type RouteGetTransportationTypesEnum = typeof RouteGetTransportationTypesEnum[keyof typeof RouteGetTransportationTypesEnum];
