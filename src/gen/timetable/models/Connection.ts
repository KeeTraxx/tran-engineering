/* tslint:disable */
/* eslint-disable */
/**
 * timetable.search.ch
 * A REST API for public transportation timetables
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Leg } from './Leg';
import {
    LegFromJSON,
    LegFromJSONTyped,
    LegToJSON,
} from './Leg';

/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * From station
     * @type {string}
     * @memberof Connection
     */
    from: string;
    /**
     * Departure time
     * @type {string}
     * @memberof Connection
     */
    departure: string;
    /**
     * To station
     * @type {string}
     * @memberof Connection
     */
    to: string;
    /**
     * Arrival time
     * @type {string}
     * @memberof Connection
     */
    arrival: string;
    /**
     * Disruptions of this train
     * @type {Array<object>}
     * @memberof Connection
     */
    disruptions?: Array<object>;
    /**
     * 
     * @type {Array<Leg>}
     * @memberof Connection
     */
    legs: Array<Leg>;
    /**
     * Duration of this trip [s]
     * @type {number}
     * @memberof Connection
     */
    duration: number;
}

/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "departure" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "arrival" in value;
    isInstance = isInstance && "legs" in value;
    isInstance = isInstance && "duration" in value;

    return isInstance;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': json['from'],
        'departure': json['departure'],
        'to': json['to'],
        'arrival': json['arrival'],
        'disruptions': !exists(json, 'disruptions') ? undefined : json['disruptions'],
        'legs': ((json['legs'] as Array<any>).map(LegFromJSON)),
        'duration': json['duration'],
    };
}

export function ConnectionToJSON(value?: Connection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from,
        'departure': value.departure,
        'to': value.to,
        'arrival': value.arrival,
        'disruptions': value.disruptions,
        'legs': ((value.legs as Array<any>).map(LegToJSON)),
        'duration': value.duration,
    };
}

