/* tslint:disable */
/* eslint-disable */
/**
 * timetable.search.ch
 * A REST API for public transportation timetables
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StationBoardResponseConnectionsInnerTerminal } from './StationBoardResponseConnectionsInnerTerminal';
import {
    StationBoardResponseConnectionsInnerTerminalFromJSON,
    StationBoardResponseConnectionsInnerTerminalFromJSONTyped,
    StationBoardResponseConnectionsInnerTerminalToJSON,
} from './StationBoardResponseConnectionsInnerTerminal';

/**
 * 
 * @export
 * @interface StationBoardResponseConnectionsInner
 */
export interface StationBoardResponseConnectionsInner {
    /**
     * Departure time
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    time?: string;
    /**
     * Transport type abbreviation
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    g?: string;
    /**
     * Line number
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    l?: string;
    /**
     * Train number
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    z?: string;
    /**
     * Public transportation type (abbr)
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    type: string;
    /**
     * Public transportation line
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    line?: string;
    /**
     * Operator name
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    operator: string;
    /**
     * Color (hex)
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    color?: string;
    /**
     * Public transportation type
     * @type {string}
     * @memberof StationBoardResponseConnectionsInner
     */
    typeName: string;
    /**
     * 
     * @type {StationBoardResponseConnectionsInnerTerminal}
     * @memberof StationBoardResponseConnectionsInner
     */
    terminal?: StationBoardResponseConnectionsInnerTerminal;
}

/**
 * Check if a given object implements the StationBoardResponseConnectionsInner interface.
 */
export function instanceOfStationBoardResponseConnectionsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "operator" in value;
    isInstance = isInstance && "typeName" in value;

    return isInstance;
}

export function StationBoardResponseConnectionsInnerFromJSON(json: any): StationBoardResponseConnectionsInner {
    return StationBoardResponseConnectionsInnerFromJSONTyped(json, false);
}

export function StationBoardResponseConnectionsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): StationBoardResponseConnectionsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'time': !exists(json, 'time') ? undefined : json['time'],
        'g': !exists(json, '*G') ? undefined : json['*G'],
        'l': !exists(json, '*L') ? undefined : json['*L'],
        'z': !exists(json, '*Z') ? undefined : json['*Z'],
        'type': json['type'],
        'line': !exists(json, 'line') ? undefined : json['line'],
        'operator': json['operator'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'typeName': json['type_name'],
        'terminal': !exists(json, 'terminal') ? undefined : StationBoardResponseConnectionsInnerTerminalFromJSON(json['terminal']),
    };
}

export function StationBoardResponseConnectionsInnerToJSON(value?: StationBoardResponseConnectionsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'time': value.time,
        '*G': value.g,
        '*L': value.l,
        '*Z': value.z,
        'type': value.type,
        'line': value.line,
        'operator': value.operator,
        'color': value.color,
        'type_name': value.typeName,
        'terminal': StationBoardResponseConnectionsInnerTerminalToJSON(value.terminal),
    };
}

