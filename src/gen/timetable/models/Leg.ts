/* tslint:disable */
/* eslint-disable */
/**
 * timetable.search.ch
 * A REST API for public transportation timetables
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LegExit } from './LegExit';
import {
    LegExitFromJSON,
    LegExitFromJSONTyped,
    LegExitToJSON,
} from './LegExit';
import type { Stop } from './Stop';
import {
    StopFromJSON,
    StopFromJSONTyped,
    StopToJSON,
} from './Stop';

/**
 * 
 * @export
 * @interface Leg
 */
export interface Leg {
    /**
     * Type abbreviation
     * @type {string}
     * @memberof Leg
     */
    type: string;
    /**
     * Platform
     * @type {string}
     * @memberof Leg
     */
    track?: string;
    /**
     * Name of the terminal station
     * @type {string}
     * @memberof Leg
     */
    terminal?: string;
    /**
     * Foreground hex color
     * @type {string}
     * @memberof Leg
     */
    fgcolor?: string;
    /**
     * Train line and train number
     * @type {string}
     * @memberof Leg
     */
    number?: string;
    /**
     * Background hex color
     * @type {string}
     * @memberof Leg
     */
    bgcolor?: string;
    /**
     * Trip ID
     * @type {string}
     * @memberof Leg
     */
    tripid: string;
    /**
     * 
     * @type {LegExit}
     * @memberof Leg
     */
    exit?: LegExit;
    /**
     * Time until disembark
     * @type {number}
     * @memberof Leg
     */
    runningtime: number;
    /**
     * Stop ID
     * @type {string}
     * @memberof Leg
     */
    stopid: string;
    /**
     * Line description
     * @type {string}
     * @memberof Leg
     */
    line?: string;
    /**
     * Intermediate stops
     * @type {Array<Stop>}
     * @memberof Leg
     */
    stops?: Array<Stop>;
    /**
     * SBB Name
     * @type {string}
     * @memberof Leg
     */
    sbbName: string;
    /**
     * Station name
     * @type {string}
     * @memberof Leg
     */
    name: string;
}

/**
 * Check if a given object implements the Leg interface.
 */
export function instanceOfLeg(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tripid" in value;
    isInstance = isInstance && "runningtime" in value;
    isInstance = isInstance && "stopid" in value;
    isInstance = isInstance && "sbbName" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function LegFromJSON(json: any): Leg {
    return LegFromJSONTyped(json, false);
}

export function LegFromJSONTyped(json: any, ignoreDiscriminator: boolean): Leg {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'track': !exists(json, 'track') ? undefined : json['track'],
        'terminal': !exists(json, 'terminal') ? undefined : json['terminal'],
        'fgcolor': !exists(json, 'fgcolor') ? undefined : json['fgcolor'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'bgcolor': !exists(json, 'bgcolor') ? undefined : json['bgcolor'],
        'tripid': json['tripid'],
        'exit': !exists(json, 'exit') ? undefined : LegExitFromJSON(json['exit']),
        'runningtime': json['runningtime'],
        'stopid': json['stopid'],
        'line': !exists(json, 'line') ? undefined : json['line'],
        'stops': !exists(json, 'stops') ? undefined : ((json['stops'] as Array<any>).map(StopFromJSON)),
        'sbbName': json['sbb_name'],
        'name': json['name'],
    };
}

export function LegToJSON(value?: Leg | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'track': value.track,
        'terminal': value.terminal,
        'fgcolor': value.fgcolor,
        'number': value.number,
        'bgcolor': value.bgcolor,
        'tripid': value.tripid,
        'exit': LegExitToJSON(value.exit),
        'runningtime': value.runningtime,
        'stopid': value.stopid,
        'line': value.line,
        'stops': value.stops === undefined ? undefined : ((value.stops as Array<any>).map(StopToJSON)),
        'sbb_name': value.sbbName,
        'name': value.name,
    };
}

