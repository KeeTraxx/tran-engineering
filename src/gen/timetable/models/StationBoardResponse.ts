/* tslint:disable */
/* eslint-disable */
/**
 * timetable.search.ch
 * A REST API for public transportation timetables
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StationBoardResponseConnectionsInner } from './StationBoardResponseConnectionsInner';
import {
    StationBoardResponseConnectionsInnerFromJSON,
    StationBoardResponseConnectionsInnerFromJSONTyped,
    StationBoardResponseConnectionsInnerToJSON,
} from './StationBoardResponseConnectionsInner';
import type { StationBoardResponseStop } from './StationBoardResponseStop';
import {
    StationBoardResponseStopFromJSON,
    StationBoardResponseStopFromJSONTyped,
    StationBoardResponseStopToJSON,
} from './StationBoardResponseStop';

/**
 * 
 * @export
 * @interface StationBoardResponse
 */
export interface StationBoardResponse {
    /**
     * 
     * @type {StationBoardResponseStop}
     * @memberof StationBoardResponse
     */
    stop?: StationBoardResponseStop;
    /**
     * 
     * @type {Array<StationBoardResponseConnectionsInner>}
     * @memberof StationBoardResponse
     */
    connections?: Array<StationBoardResponseConnectionsInner>;
    /**
     * 
     * @type {string}
     * @memberof StationBoardResponse
     */
    request?: string;
    /**
     * 
     * @type {number}
     * @memberof StationBoardResponse
     */
    eof?: number;
}

/**
 * Check if a given object implements the StationBoardResponse interface.
 */
export function instanceOfStationBoardResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StationBoardResponseFromJSON(json: any): StationBoardResponse {
    return StationBoardResponseFromJSONTyped(json, false);
}

export function StationBoardResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StationBoardResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stop': !exists(json, 'stop') ? undefined : StationBoardResponseStopFromJSON(json['stop']),
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(StationBoardResponseConnectionsInnerFromJSON)),
        'request': !exists(json, 'request') ? undefined : json['request'],
        'eof': !exists(json, 'eof') ? undefined : json['eof'],
    };
}

export function StationBoardResponseToJSON(value?: StationBoardResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stop': StationBoardResponseStopToJSON(value.stop),
        'connections': value.connections === undefined ? undefined : ((value.connections as Array<any>).map(StationBoardResponseConnectionsInnerToJSON)),
        'request': value.request,
        'eof': value.eof,
    };
}

